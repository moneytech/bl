/* playground */

Foo :: 10 + 2;

Data :: struct {
    i: s32;
    j: s32;
}

Data2 :: struct {
    data: Data;
    i: s32;
}

Enum :: enum {
    A :: 10;
    B;
    C;
}

MyData :: {:Data2: {:Data: 10, 20}, 30};
DataPtr :: cast(*Data) &MyData;

Arr :: {:[4]s32: 1, 2, 3, 4};
Arr2 :: {:[2]Data: {:Data: 10, 20}, {:Data: 30, 40}};
Arr3 :: &Arr;
Arr4 :: {:[10]s32: 0};

FnPtr :: *fn ();
fptr : FnPtr : &my_func;
funcs := {:[2]FnPtr: &my_func, &my_func};

my_func :: fn () {
}

main :: fn () s32 {
    result := 0;
    result += test_1();
    result += test_2();
    result += test_3();
    result += test_4();

    print("hello!!!\n");

    fptr();

    a : Data;
    a = {:Data: 10, 20};

    //info :: typeinfo(s32);
    //print("%\n", ^info);
    
    return result;
}

test_1 :: fn () s32 {
    arr := Arr;
    index := 2;
    v := Arr[index];
    return v;
}

test_2 :: fn () s32 {
    index :: 1;
    v :: Arr2[index];
    return v.i + v.j;
}

test_3 :: fn () s32 {
    v :: (^Arr3)[1];
    return v;
}

test_4 :: fn () s32 {
    index := 1;
    a :: index;
    return a;
}