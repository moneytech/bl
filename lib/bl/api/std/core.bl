//************************************************************************************************
// bl
//
// File:   core.bl
// Author: Martin Dorazil
// Date:   2/11/19
//
// Copyright 2018 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//************************************************************************************************

#load "c.bl"
#load "debug.bl"
#load "memory.bl"

/*
 * TypeKind describes kind of BL type returned in TypeInfo structure. This value can be used for 
 * safe casting.
 */
TypeKind :: enum #compiler {
    Type   :: 1,
    Void   :: 2,
    Int    :: 3,
    Real   :: 4,
    Fn     :: 5,
    Ptr    :: 6,
    Bool   :: 7,
    Array  :: 8,
    Struct :: 9,
    Enum   :: 10,
    Null   :: 11,
    String :: 12,
    VArgs  :: 13,
    Slice  :: 14,
};

/*
 * Base TypeInfo structure returned by typeinfo operator. This structure contains only TypeKind
 * identificator and pointer returned by typeinfo operator can be casted to child type to get more
 * descriptive informations about the type.
 */
TypeInfo :: struct #compiler {
    kind: TypeKind,
    size: usize
};

/*
 * Type information for 'type' type.
 */
TypeInfoType :: struct #compiler {
    base: TypeInfo
};

/*
 * Type information for 'void' type.
 */
TypeInfoVoid :: struct #compiler {
    base: TypeInfo
};

/*
 * Type information for 's*' or 'u*' types.
 */
TypeInfoInt :: struct #compiler {
    base: TypeInfo,
    bitcount: s32, // Bitcount.
    is_signed: bool, // True when signed.
};

/*
 * Type information for 'f*' types.
 */
TypeInfoReal :: struct #compiler {
    base: TypeInfo,
    bitcount: s32 // Bitcount
};

/*
 * Type information for function types.
 */
TypeInfoFn :: struct #compiler {
    base: TypeInfo,
    args: []*TypeInfo, // Function arguments.
    ret: *TypeInfo, // Return type.
    is_vargs: bool // True when function is vargs.
};

/*
 * Type information for pointer types.
 */
TypeInfoPtr :: struct #compiler {
    base: TypeInfo,
    pointed: *TypeInfo // Type information for pointed type.
};

/*
 * Type information for bool type.
 */
TypeInfoBool :: struct #compiler {
    base: TypeInfo,
};

/*
 * Type information for array type.
 */
TypeInfoArray :: struct #compiler {
    base: TypeInfo,
    elem: *TypeInfo, // Element type information.
    len: usize // Array lenght.
};

/*
 * Type information for structure type.
 */
TypeInfoStruct :: struct #compiler {
    base: TypeInfo,
    members: []*TypeInfo, // Structure members type information.
    member_names: []string,
};

/*
 * Type information for enm type.
 */
TypeInfoEnum :: struct #compiler {
    base: TypeInfo,
    base_type: *TypeInfo // Enum base-type type information.
};

/*
 * Type information for null type.
 */
TypeInfoNull :: struct #compiler {
    base: TypeInfo,
};

TypeInfoString :: struct #compiler {
    base: TypeInfo,
};

TypeInfoSlice :: struct #compiler {
    base: TypeInfo,
};

TypeInfoVArgs :: struct #compiler {
    base: TypeInfo,
};

/*
 * Any type structure. Any value can be implicitly casted to this container.
 */
Any :: struct #compiler {
    type_info: *TypeInfo,
    data: *u8
};

/*
 * Converts C string to BL string.
 */
cstr_to_str :: fn (cstr: *u8) string {
    return {:string: strlen(cstr), cstr};
};

